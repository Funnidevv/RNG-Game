const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
const PORT = 3000;
const SECRET_KEY = 'SSGA'; // Securely stored in real apps

app.use(cors());
app.use(bodyParser.json());

let data = JSON.parse(fs.readFileSync('data.json', 'utf8'));

function saveData() {
  fs.writeFileSync('data.json', JSON.stringify(data));
}

// Middleware to check dev key
function checkDevKey(req, res, next) {
  if (req.headers['dev-key'] !== SECRET_KEY) {
    return res.status(403).send("Forbidden");
  }
  next();
}

app.post('/dev/delete', checkDevKey, (req, res) => {
  const name = req.body.name;
  if (data.leaderboard[name]) {
    delete data.leaderboard[name];
    saveData();
    res.send(`${name} deleted`);
  } else res.status(404).send("Player not found");
});

app.post('/dev/reset', checkDevKey, (req, res) => {
  const name = req.body.name;
  if (data.leaderboard[name]) {
    data.leaderboard[name] = { aura: 'None', points: 0, auras: [] };
    saveData();
    res.send(`${name}'s data reset`);
  } else res.status(404).send("Player not found");
});

app.post('/dev/infinite', checkDevKey, (req, res) => {
  const name = req.body.name;
  if (data.leaderboard[name]) {
    data.leaderboard[name].points = 999999;
    saveData();
    res.send(`${name} now has infinite points`);
  } else res.status(404).send("Player not found");
});

app.post('/dev/giveAura', checkDevKey, (req, res) => {
  const name = req.body.name;
  if (data.leaderboard[name]) {
    const aura = "Developer Aura";
    data.leaderboard[name].auras.push(aura);
    data.leaderboard[name].aura = aura;
    saveData();
    res.send(`${name} received special aura`);
  } else res.status(404).send("Player not found");
});

app.get('/data', (req, res) => {
  res.json(data);
});

app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
